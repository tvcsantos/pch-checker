/*
 * PCHCheckerView.java
 */

package pchchecker;

import java.awt.Font;
import java.io.File;
import java.io.OutputStream;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.Observable;
import java.util.Observer;
import java.util.logging.LogRecord;
import java.util.logging.SimpleFormatter;
import java.util.logging.StreamHandler;
import javax.swing.DefaultListModel;
import org.jdesktop.application.Action;
import javax.swing.JDialog;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import net.sourceforge.tuned.FilterIterator;
import pt.unl.fct.di.tsantos.util.app.DefaultTrayedFrameView;
import pt.unl.fct.di.tsantos.util.swing.JStreamedTextArea;
import pt.unl.fct.di.tsantos.util.time.Ticker;

/**
 * The application's main frame.
 */
public class PCHCheckerView extends DefaultTrayedFrameView<PCHCheckerApp> {

    public PCHCheckerView(PCHCheckerApp app) {
        super(app);
        initComponents();
        initMyComponents();
    }

    private OutputStream outputTextAreaStream = null;

    private void initMyComponents() {
        outputTextArea.setFont(new Font(null, 0, 11));
        outputTextAreaStream =
                ((JStreamedTextArea) outputTextArea).getOutputStream();
        PCHCheckerApp.getLogger().addHandler(
                new StreamHandler(outputTextAreaStream, new SimpleFormatter()) {

            @Override
            public synchronized void publish(LogRecord record) {
                if (record != null && record.getMessage() != null
                        && record.getMessage().isEmpty()) return;
                super.publish(record);
                flush();
            }
        });

        getFrame().setResizable(false);
        currentBox = null;
        DefaultListModel model = (DefaultListModel) jukeboxesList.getModel();
        model.clear();
        for (Jukebox jb : getTheApplication().getJukeboxes())
            model.addElement(jb);
        searchMinutesTextField.setText(
                getTheApplication().getSearchMinutes() + "");
        searchAtStartupCheckBox.setSelected(
                getTheApplication().searchAtStartup());
        hostTextField.setText(
                getTheApplication().getUTorrentHost());
        portTextField.setText(
                getTheApplication().getUTorrentPort() + "");
        uTorrentUserField.setText(
                getTheApplication().getUTorrentUser());
        uTorrentPasswordField.setText(
                getTheApplication().getUTorrentPassword());
        Observer observer = new Observer() {
            public void update(Observable o, Object arg) {
                Ticker t = (Ticker)arg;
                if (t != null) {
                    if (t.isRunning()) {
                        nextCheckLabel.setText("Checking for files");
                    } else {
                        nextCheckLabel.setText("Next check for new " +
                                "files in " + t.nextRun() + " minutes");
                    }
                }
            }
        };
        getTheApplication().addObserver(observer);
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = PCHCheckerApp.getApplication().getMainFrame();
            aboutBox = new PCHCheckerAboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        PCHCheckerApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jukeboxesList = new javax.swing.JList();
        jukeboxesLabel = new javax.swing.JLabel();
        nextCheckLabel = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        jLabel6 = new javax.swing.JLabel();
        searchMinutesTextField = new javax.swing.JTextField();
        searchMinutesLabel = new javax.swing.JLabel();
        addButton = new javax.swing.JButton();
        deleteButton = new javax.swing.JButton();
        searchAtStartupCheckBox = new javax.swing.JCheckBox();
        uTorrentWebUILabel = new javax.swing.JLabel();
        uTorrentUserField = new javax.swing.JTextField();
        uTorrentPasswordField = new javax.swing.JPasswordField();
        uTorrentUserLabel = new javax.swing.JLabel();
        uTorrentPwdLabel = new javax.swing.JLabel();
        hostLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        hostTextField = new javax.swing.JTextField();
        portTextField = new javax.swing.JTextField();
        checkButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        jMenu1 = new javax.swing.JMenu();
        logMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        jukeboxMenu = new javax.swing.JDialog();
        jScrollPane2 = new javax.swing.JScrollPane();
        moviesList = new javax.swing.JList();
        jScrollPane3 = new javax.swing.JScrollPane();
        showsList = new javax.swing.JList();
        jukeboxDirTextField = new javax.swing.JTextField();
        saveButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        moviesLabel = new javax.swing.JLabel();
        showsLabel = new javax.swing.JLabel();
        jukeboxDirLabel = new javax.swing.JLabel();
        deleteJMButton = new javax.swing.JButton();
        jboxNameLabel = new javax.swing.JLabel();
        jboxNameTextField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        addMovieButton = new javax.swing.JButton();
        addShowButton = new javax.swing.JButton();
        removeMovieButton = new javax.swing.JButton();
        removeShowButton = new javax.swing.JButton();
        outputDialog = new javax.swing.JDialog();
        jScrollPane4 = new javax.swing.JScrollPane();
        outputTextArea = new JStreamedTextArea();

        mainPanel.setName("mainPanel"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        jukeboxesList.setModel(new DefaultListModel());
        jukeboxesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jukeboxesList.setName("jukeboxesList"); // NOI18N
        jukeboxesList.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jukeboxesListMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jukeboxesList);

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(pchchecker.PCHCheckerApp.class).getContext().getResourceMap(PCHCheckerView.class);
        jukeboxesLabel.setText(resourceMap.getString("jukeboxesLabel.text")); // NOI18N
        jukeboxesLabel.setName("jukeboxesLabel"); // NOI18N

        nextCheckLabel.setText(resourceMap.getString("nextCheckLabel.text")); // NOI18N
        nextCheckLabel.setName("nextCheckLabel"); // NOI18N

        jSeparator1.setName("jSeparator1"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        searchMinutesTextField.setText(resourceMap.getString("searchMinutesTextField.text")); // NOI18N
        searchMinutesTextField.setName("searchMinutesTextField"); // NOI18N
        searchMinutesTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchMinutesTextFieldActionPerformed(evt);
            }
        });

        searchMinutesLabel.setText(resourceMap.getString("searchMinutesLabel.text")); // NOI18N
        searchMinutesLabel.setName("searchMinutesLabel"); // NOI18N

        addButton.setText(resourceMap.getString("addButton.text")); // NOI18N
        addButton.setName("addButton"); // NOI18N
        addButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addButtonActionPerformed(evt);
            }
        });

        deleteButton.setText(resourceMap.getString("deleteButton.text")); // NOI18N
        deleteButton.setName("deleteButton"); // NOI18N
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        searchAtStartupCheckBox.setText(resourceMap.getString("searchAtStartupCheckBox.text")); // NOI18N
        searchAtStartupCheckBox.setName("searchAtStartupCheckBox"); // NOI18N
        searchAtStartupCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchAtStartupCheckBoxActionPerformed(evt);
            }
        });

        uTorrentWebUILabel.setText(resourceMap.getString("uTorrentWebUILabel.text")); // NOI18N
        uTorrentWebUILabel.setName("uTorrentWebUILabel"); // NOI18N

        uTorrentUserField.setText(resourceMap.getString("uTorrentUserField.text")); // NOI18N
        uTorrentUserField.setName("uTorrentUserField"); // NOI18N
        uTorrentUserField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uTorrentUserFieldActionPerformed(evt);
            }
        });

        uTorrentPasswordField.setText(resourceMap.getString("uTorrentPasswordField.text")); // NOI18N
        uTorrentPasswordField.setName("uTorrentPasswordField"); // NOI18N
        uTorrentPasswordField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                uTorrentPasswordFieldActionPerformed(evt);
            }
        });

        uTorrentUserLabel.setText(resourceMap.getString("uTorrentUserLabel.text")); // NOI18N
        uTorrentUserLabel.setName("uTorrentUserLabel"); // NOI18N

        uTorrentPwdLabel.setText(resourceMap.getString("uTorrentPwdLabel.text")); // NOI18N
        uTorrentPwdLabel.setName("uTorrentPwdLabel"); // NOI18N

        hostLabel.setText(resourceMap.getString("hostLabel.text")); // NOI18N
        hostLabel.setName("hostLabel"); // NOI18N

        portLabel.setText(resourceMap.getString("portLabel.text")); // NOI18N
        portLabel.setName("portLabel"); // NOI18N

        hostTextField.setText(resourceMap.getString("hostTextField.text")); // NOI18N
        hostTextField.setName("hostTextField"); // NOI18N
        hostTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                hostTextFieldActionPerformed(evt);
            }
        });

        portTextField.setText(resourceMap.getString("portTextField.text")); // NOI18N
        portTextField.setName("portTextField"); // NOI18N
        portTextField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                portTextFieldActionPerformed(evt);
            }
        });

        checkButton.setText(resourceMap.getString("checkButton.text")); // NOI18N
        checkButton.setName("checkButton"); // NOI18N
        checkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jSeparator1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 362, Short.MAX_VALUE)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jukeboxesLabel)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addGroup(mainPanelLayout.createSequentialGroup()
                                .addGap(2, 2, 2)
                                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addComponent(searchMinutesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(searchMinutesLabel))
                                    .addComponent(uTorrentWebUILabel)
                                    .addComponent(searchAtStartupCheckBox, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(mainPanelLayout.createSequentialGroup()
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(hostLabel)
                                            .addComponent(portLabel)
                                            .addComponent(uTorrentUserLabel)
                                            .addComponent(uTorrentPwdLabel))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(portTextField)
                                            .addComponent(hostTextField)
                                            .addComponent(uTorrentUserField)
                                            .addComponent(uTorrentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                        .addComponent(checkButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(addButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(deleteButton)))
                .addContainerGap())
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(nextCheckLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 342, Short.MAX_VALUE)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jukeboxesLabel)
                    .addComponent(jLabel6))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(mainPanelLayout.createSequentialGroup()
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(searchMinutesTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(searchMinutesLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(searchAtStartupCheckBox)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(uTorrentWebUILabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(hostLabel)
                            .addComponent(hostTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(portLabel)
                            .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uTorrentUserField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uTorrentUserLabel))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(uTorrentPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(uTorrentPwdLabel))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(deleteButton)
                    .addComponent(addButton)
                    .addComponent(checkButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 2, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nextCheckLabel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(pchchecker.PCHCheckerApp.class).getContext().getActionMap(PCHCheckerView.class, this);
        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        jMenu1.setText(resourceMap.getString("jMenu1.text")); // NOI18N
        jMenu1.setName("jMenu1"); // NOI18N

        logMenuItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_F2, 0));
        logMenuItem.setText(resourceMap.getString("logMenuItem.text")); // NOI18N
        logMenuItem.setName("logMenuItem"); // NOI18N
        logMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                logMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(logMenuItem);

        menuBar.add(jMenu1);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        jukeboxMenu.setModal(true);
        jukeboxMenu.setName("jukeboxMenu"); // NOI18N
        jukeboxMenu.setResizable(false);
        jukeboxMenu.setTitle("Jukebox Menu");

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        moviesList.setModel(new DefaultListModel());
        moviesList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        moviesList.setName("moviesList"); // NOI18N
        jScrollPane2.setViewportView(moviesList);

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        showsList.setModel(new DefaultListModel());
        showsList.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        showsList.setName("showsList"); // NOI18N
        jScrollPane3.setViewportView(showsList);

        jukeboxDirTextField.setEditable(false);
        jukeboxDirTextField.setText(resourceMap.getString("jukeboxDirTextField.text")); // NOI18N
        jukeboxDirTextField.setName("jukeboxDirTextField"); // NOI18N

        saveButton.setText(resourceMap.getString("saveButton.text")); // NOI18N
        saveButton.setName("saveButton"); // NOI18N
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        cancelButton.setText(resourceMap.getString("cancelButton.text")); // NOI18N
        cancelButton.setName("cancelButton"); // NOI18N
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        moviesLabel.setText(resourceMap.getString("moviesLabel.text")); // NOI18N
        moviesLabel.setName("moviesLabel"); // NOI18N

        showsLabel.setText(resourceMap.getString("showsLabel.text")); // NOI18N
        showsLabel.setName("showsLabel"); // NOI18N

        jukeboxDirLabel.setText(resourceMap.getString("jukeboxDirLabel.text")); // NOI18N
        jukeboxDirLabel.setName("jukeboxDirLabel"); // NOI18N

        deleteJMButton.setText(resourceMap.getString("deleteJMButton.text")); // NOI18N
        deleteJMButton.setName("deleteJMButton"); // NOI18N
        deleteJMButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteJMButtonActionPerformed(evt);
            }
        });

        jboxNameLabel.setText(resourceMap.getString("jboxNameLabel.text")); // NOI18N
        jboxNameLabel.setName("jboxNameLabel"); // NOI18N

        jboxNameTextField.setText(resourceMap.getString("jboxNameTextField.text")); // NOI18N
        jboxNameTextField.setName("jboxNameTextField"); // NOI18N

        browseButton.setText(resourceMap.getString("browseButton.text")); // NOI18N
        browseButton.setName("browseButton"); // NOI18N
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });

        addMovieButton.setText(resourceMap.getString("addMovieButton.text")); // NOI18N
        addMovieButton.setName("addMovieButton"); // NOI18N
        addMovieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addMovieButtonActionPerformed(evt);
            }
        });

        addShowButton.setText(resourceMap.getString("addShowButton.text")); // NOI18N
        addShowButton.setName("addShowButton"); // NOI18N
        addShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addShowButtonActionPerformed(evt);
            }
        });

        removeMovieButton.setText(resourceMap.getString("removeMovieButton.text")); // NOI18N
        removeMovieButton.setName("removeMovieButton"); // NOI18N
        removeMovieButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeMovieButtonActionPerformed(evt);
            }
        });

        removeShowButton.setText(resourceMap.getString("removeShowButton.text")); // NOI18N
        removeShowButton.setName("removeShowButton"); // NOI18N
        removeShowButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                removeShowButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jukeboxMenuLayout = new javax.swing.GroupLayout(jukeboxMenu.getContentPane());
        jukeboxMenu.getContentPane().setLayout(jukeboxMenuLayout);
        jukeboxMenuLayout.setHorizontalGroup(
            jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jukeboxMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jboxNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jboxNameLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jukeboxMenuLayout.createSequentialGroup()
                        .addComponent(jukeboxDirTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 240, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(browseButton))
                    .addComponent(jukeboxDirLabel)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jukeboxMenuLayout.createSequentialGroup()
                        .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(moviesLabel)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jukeboxMenuLayout.createSequentialGroup()
                                .addComponent(addMovieButton)
                                .addGap(18, 18, 18)
                                .addComponent(removeMovieButton))
                            .addGroup(jukeboxMenuLayout.createSequentialGroup()
                                .addComponent(deleteJMButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 77, Short.MAX_VALUE)))
                        .addGap(35, 35, 35)
                        .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jukeboxMenuLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 10, Short.MAX_VALUE)
                                .addComponent(saveButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cancelButton))
                            .addComponent(showsLabel)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jukeboxMenuLayout.createSequentialGroup()
                                .addComponent(addShowButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                                .addComponent(removeShowButton)))))
                .addContainerGap())
        );
        jukeboxMenuLayout.setVerticalGroup(
            jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jukeboxMenuLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jboxNameLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jboxNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jukeboxDirLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jukeboxDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(browseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(moviesLabel)
                    .addComponent(showsLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addShowButton)
                    .addComponent(addMovieButton)
                    .addComponent(removeShowButton)
                    .addComponent(removeMovieButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jukeboxMenuLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE, false)
                    .addComponent(deleteJMButton)
                    .addComponent(cancelButton)
                    .addComponent(saveButton))
                .addContainerGap())
        );

        jukeboxMenu.pack();

        outputDialog.setName("outputDialog"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        outputTextArea.setColumns(20);
        outputTextArea.setEditable(false);
        outputTextArea.setRows(5);
        outputTextArea.setName("outputTextArea"); // NOI18N
        jScrollPane4.setViewportView(outputTextArea);

        javax.swing.GroupLayout outputDialogLayout = new javax.swing.GroupLayout(outputDialog.getContentPane());
        outputDialog.getContentPane().setLayout(outputDialogLayout);
        outputDialogLayout.setHorizontalGroup(
            outputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 567, Short.MAX_VALUE)
        );
        outputDialogLayout.setVerticalGroup(
            outputDialogLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 292, Short.MAX_VALUE)
        );

        outputDialog.pack();

        setComponent(mainPanel);
        setMenuBar(menuBar);
    }// </editor-fold>//GEN-END:initComponents

    private void deleteJMButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteJMButtonActionPerformed
        if (currentBox != null) {
            getTheApplication().remove(currentBox);
            DefaultListModel lm = (DefaultListModel) jukeboxesList.getModel();
            lm.removeElement(currentBox);
            currentBox = null;
            jukeboxMenu.setVisible(false);
            clearJukeBoxMenu();
        }
    }//GEN-LAST:event_deleteJMButtonActionPerformed

    private void jukeboxesListMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jukeboxesListMouseClicked
        if (evt.getClickCount() != 2) return;
        Jukebox jb = (Jukebox) jukeboxesList.getSelectedValue();
        if (jb != null) {
            currentBox = jb;
            loadJukeBoxMenu(currentBox);
            jukeboxMenu.setLocationRelativeTo(getFrame());
            jukeboxMenu.setVisible(true);
        }
    }//GEN-LAST:event_jukeboxesListMouseClicked

    private void addButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addButtonActionPerformed
        clearJukeBoxMenu();
        jukeboxMenu.setLocationRelativeTo(getFrame());
        jukeboxMenu.setVisible(true);
    }//GEN-LAST:event_addButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        Jukebox jb = (Jukebox) jukeboxesList.getSelectedValue();
        int index = jukeboxesList.getSelectedIndex();
        if (jb != null) {
            DefaultListModel lm = (DefaultListModel) jukeboxesList.getModel();
            lm.remove(index);
            getTheApplication().remove(jb);
        }
    }//GEN-LAST:event_deleteButtonActionPerformed

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        String name = jboxNameTextField.getText();
        List<File> movies = new LinkedList<File>();
        List<File> shows = new LinkedList<File>();
        String folderS = jukeboxDirTextField.getText();
        DefaultListModel mm = (DefaultListModel) moviesList.getModel();
        for (int i = 0; i < mm.getSize(); i++) {
            File mf = (File) mm.get(i);
            movies.add(mf);
        }
        mm = (DefaultListModel) showsList.getModel();
        for (int i = 0; i < mm.getSize(); i++) {
            File sf = (File) mm.get(i);
            shows.add(sf);
        }
        mm = (DefaultListModel) jukeboxesList.getModel();

        ////////// CHECK DATA //////////
        if (folderS == null || folderS.isEmpty()) {
            JOptionPane.showMessageDialog(jukeboxMenu,
                            "Jukebox folder must be non empty.",
                            "Warning!", JOptionPane.ERROR_MESSAGE);
            return;
        }

        File folder = new File(folderS);

        if (name == null || name.isEmpty()) {
            JOptionPane.showMessageDialog(jukeboxMenu,
                            "Jukebox name must be non empty.",
                            "Warning!", JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!(currentBox != null && currentBox.getFolder().equals(folder))
                && isSubDirectory(folder,
                new FilterIterator<Jukebox, File>(
                        getTheApplication().getJukeboxes().iterator()){
                            @Override
                            protected File filter(Jukebox sourceValue) {
                                return sourceValue.getFolder();
                            }
            
                })) {
            JOptionPane.showMessageDialog(jukeboxMenu,
                            "Jukebox folder cannot be a subdirectory" +
                            " of other jukeboxes.",
                            "Warning!", JOptionPane.ERROR_MESSAGE);
            return;
        }            
        ////////////////////////////////

        if (currentBox != null) {
            getTheApplication().remove(currentBox);
            mm.removeElement(currentBox);
        }
        currentBox = new Jukebox(name, folder, movies, shows);
        getTheApplication().add(currentBox);
        mm.addElement(currentBox);
        jukeboxMenu.setVisible(false);
        currentBox = null;
    }//GEN-LAST:event_saveButtonActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int showOpenDialog = fileChooser.showOpenDialog(getFrame());

        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            jukeboxDirTextField.setText(f.getAbsolutePath());
        }
    }//GEN-LAST:event_browseButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        currentBox = null;
        jukeboxMenu.setVisible(false);
        clearJukeBoxMenu();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void addMovieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addMovieButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int showOpenDialog = fileChooser.showOpenDialog(getFrame());

        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            DefaultListModel mm = (DefaultListModel) moviesList.getModel();
            mm.addElement(f);
        }
    }//GEN-LAST:event_addMovieButtonActionPerformed

    private void addShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addShowButtonActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);

        int showOpenDialog = fileChooser.showOpenDialog(getFrame());

        if (showOpenDialog == JFileChooser.APPROVE_OPTION) {
            File f = fileChooser.getSelectedFile();
            DefaultListModel mm = (DefaultListModel) showsList.getModel();
            mm.addElement(f);
        }
    }//GEN-LAST:event_addShowButtonActionPerformed

    private void removeMovieButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeMovieButtonActionPerformed
        int index = moviesList.getSelectedIndex();
        if (index != -1) {
            DefaultListModel lm = (DefaultListModel) moviesList.getModel();
            lm.remove(index);
        }
    }//GEN-LAST:event_removeMovieButtonActionPerformed

    private void removeShowButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_removeShowButtonActionPerformed
        int index = showsList.getSelectedIndex();
        if (index != -1) {
            DefaultListModel lm = (DefaultListModel) showsList.getModel();
            lm.remove(index);
        }
    }//GEN-LAST:event_removeShowButtonActionPerformed

    private void searchMinutesTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchMinutesTextFieldActionPerformed
        String text = searchMinutesTextField.getText();
        try {
            int mins = Integer.parseInt(text);
            if (mins <= 0) {
                JOptionPane.showMessageDialog(getFrame(),
                        "Number must be a positive integer.",
                        "Warning!", JOptionPane.WARNING_MESSAGE);
            } else {
                getTheApplication().setSearchMinutes(mins);
            }
            searchMinutesTextField.setText(
                    getTheApplication().getSearchMinutes() + "");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(getFrame(),
                    "Invalid number. Number must be an integer.",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_searchMinutesTextFieldActionPerformed

    private void uTorrentUserFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uTorrentUserFieldActionPerformed
        String user = uTorrentUserField.getText();
        if (user != null) user = user.trim();
        getTheApplication().setUTorrentUser(user);
    }//GEN-LAST:event_uTorrentUserFieldActionPerformed

    private void uTorrentPasswordFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_uTorrentPasswordFieldActionPerformed
        char[] pwd = uTorrentPasswordField.getPassword();
        if (pwd != null) 
            getTheApplication().setUTorrentPassword(new String(pwd));
    }//GEN-LAST:event_uTorrentPasswordFieldActionPerformed

    private void searchAtStartupCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchAtStartupCheckBoxActionPerformed
        getTheApplication().setSearchAtStartup(
                searchAtStartupCheckBox.isSelected());
    }//GEN-LAST:event_searchAtStartupCheckBoxActionPerformed

    private void hostTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_hostTextFieldActionPerformed
        String host = hostTextField.getText();
        if (host != null) getTheApplication().setUTorrentHost(host);
    }//GEN-LAST:event_hostTextFieldActionPerformed

    private void portTextFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_portTextFieldActionPerformed
        String text = portTextField.getText();
        try {
            int port = Integer.parseInt(text);
            if (port <= 0) {
                JOptionPane.showMessageDialog(getFrame(),
                        "Number must be a positive integer.",
                        "Warning!", JOptionPane.WARNING_MESSAGE);
            } else {
                getTheApplication().setUTorrentPort(port);
            }
            portTextField.setText(
                    getTheApplication().getUTorrentPort() + "");
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(getFrame(),
                    "Invalid number. Number must be an integer.",
                    "Error!", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_portTextFieldActionPerformed

    private void logMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_logMenuItemActionPerformed
        // TODO add your handling code here:
        outputDialog.setLocationRelativeTo(getFrame());
        outputDialog.setVisible(true);
    }//GEN-LAST:event_logMenuItemActionPerformed

    private void checkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkButtonActionPerformed
        getTheApplication().check();
    }//GEN-LAST:event_checkButtonActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JButton addMovieButton;
    private javax.swing.JButton addShowButton;
    private javax.swing.JButton browseButton;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton checkButton;
    private javax.swing.JButton deleteButton;
    private javax.swing.JButton deleteJMButton;
    private javax.swing.JLabel hostLabel;
    private javax.swing.JTextField hostTextField;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel jboxNameLabel;
    private javax.swing.JTextField jboxNameTextField;
    private javax.swing.JLabel jukeboxDirLabel;
    private javax.swing.JTextField jukeboxDirTextField;
    private javax.swing.JDialog jukeboxMenu;
    private javax.swing.JLabel jukeboxesLabel;
    private javax.swing.JList jukeboxesList;
    private javax.swing.JMenuItem logMenuItem;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JLabel moviesLabel;
    private javax.swing.JList moviesList;
    private javax.swing.JLabel nextCheckLabel;
    private javax.swing.JDialog outputDialog;
    private javax.swing.JTextArea outputTextArea;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton removeMovieButton;
    private javax.swing.JButton removeShowButton;
    private javax.swing.JButton saveButton;
    private javax.swing.JCheckBox searchAtStartupCheckBox;
    private javax.swing.JLabel searchMinutesLabel;
    private javax.swing.JTextField searchMinutesTextField;
    private javax.swing.JLabel showsLabel;
    private javax.swing.JList showsList;
    private javax.swing.JPasswordField uTorrentPasswordField;
    private javax.swing.JLabel uTorrentPwdLabel;
    private javax.swing.JTextField uTorrentUserField;
    private javax.swing.JLabel uTorrentUserLabel;
    private javax.swing.JLabel uTorrentWebUILabel;
    // End of variables declaration//GEN-END:variables

    private JDialog aboutBox;

    private Jukebox currentBox;

    private void clearJukeBoxMenu() {
        DefaultListModel mm = (DefaultListModel) moviesList.getModel();
        mm.clear();
        mm = (DefaultListModel) showsList.getModel();
        mm.clear();
        jukeboxDirTextField.setText("");
        jboxNameTextField.setText("");
    }

    private void loadJukeBoxMenu(Jukebox jb) {
        clearJukeBoxMenu();
        DefaultListModel mm = (DefaultListModel) moviesList.getModel();
        for (File f : jb.getMovies()) mm.addElement(f);
        mm = (DefaultListModel) showsList.getModel();
        for (File f : jb.getTVShows()) mm.addElement(f);
        jukeboxDirTextField.setText(jb.getFolder().toString());
        jboxNameTextField.setText(jb.toString());
    }

    private boolean isSubDirectory(File file, Iterator<File> files) {
        while (files.hasNext()) {
            File f = files.next();
            File curr = file;
            while (curr != null && !curr.equals(f))
                curr = curr.getParentFile();
            if (curr != null) return true;
        }
        return false;
    }
}
